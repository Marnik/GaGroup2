package cifo;

import java.text.DecimalFormat;

import gd.gui.GeneticDrawingApp;

public class Main {

	public static final int NUMBER_OF_TRIANGLES = 100;		//fixed

	public static final int NUMBER_OF_RUNS = 5;			//30-50 runs for report; 10 runs for testing
	public static final int NUMBER_OF_GENERATIONS = 2000;	//fixed to 2000
	public static final int POPULATION_SIZE = 25;			//fixed to 25
	public static final double MUTATION_PROBABILIY = 1;	//actual probability = 0.25*1/100 = 0.0025
	public static int TOURNAMENT_SIZE = 3;
	public static boolean ITERATE_OVER_TOURNAMENT =	false;	//default: false; if set to true, the algorithm will iterate over all tournament sizes from 3 to Population size
	public static final int NUMBER_OF_OFFSPRINGS = 2; // Has to be 1 or 2
	public static final int NUMBER_OF_TRIANGLE_MUTATIONS = 5;

	public static boolean KEEP_WINDOWS_OPEN = false;

	public static Solution[] bestSolutions = new Solution[NUMBER_OF_RUNS];
	public static double[] bestFitness = new double[NUMBER_OF_RUNS];
	public static double[] executionTimes = new double[NUMBER_OF_RUNS];
	public static int currentRun = 0;
	public static int currentTournamentRun = TOURNAMENT_SIZE + 1;
	
	public static int[][] pTypes = new int[NUMBER_OF_RUNS][NUMBER_OF_GENERATIONS];
	public static int[][] hammingDistances = new int[NUMBER_OF_RUNS][NUMBER_OF_GENERATIONS];
	public static double[][] pVariances = new double[NUMBER_OF_RUNS][NUMBER_OF_GENERATIONS];
	public static double[][] hammingDistanceRatios = new double[NUMBER_OF_RUNS][NUMBER_OF_GENERATIONS];
	public static double[][] averageFitnesses = new double[NUMBER_OF_RUNS][NUMBER_OF_GENERATIONS];
	public static double[][] bestFitnesses = new double[NUMBER_OF_RUNS][NUMBER_OF_GENERATIONS];
	
	public static void main(String[] args) {
		run();
	}

	public static void addBestSolution(Solution bestSolution, double executionTime) {
		bestSolutions[currentRun] = bestSolution;
		bestFitness[currentRun] = bestSolution.getFitness();
		executionTimes[currentRun] = executionTime;
		System.out.printf("Got %.2f as a result for run %d\n", bestFitness[currentRun], currentRun + 1);
		DecimalFormat f = new DecimalFormat("##.00");
		System.out.println("Run time: " + f.format(executionTime) + " minutes");
		System.out.print("All runs:");
		for (int i = 0; i <= currentRun; i++) {
			System.out.printf("\t%.2f", bestFitness[i]);
		}
		System.out.println();
		currentRun++;
		if (KEEP_WINDOWS_OPEN == false) {
			ProblemInstance.view.getFittestDrawingView().dispose();
			ProblemInstance.view.getFrame().dispose();
		}
		if (currentRun < NUMBER_OF_RUNS) {
			run();
		} else {
			presentResults();
			currentTournamentRun++;
			if (currentTournamentRun <= POPULATION_SIZE && ITERATE_OVER_TOURNAMENT) {
				currentRun = 0;
				TOURNAMENT_SIZE = currentTournamentRun;
				run();
			}
		}
	}

	public static void presentResults() {
		double mean = Statistics.mean(bestFitness);
		double stdDev = Statistics.standardDeviation(bestFitness);
		double best = Statistics.min(bestFitness);
		double worst = Statistics.max(bestFitness);
		System.out.println("\nTournament Size: " + TOURNAMENT_SIZE);
		double averageExecutionTime = Statistics.mean(executionTimes);
		System.out.printf("\n\t\tMean +- std dev\t\tBest\t\tWorst\t\tAvg Time\n\n");
		System.out.printf("Results\t\t%.2f +- %.2f\t%.2f\t%.2f\t%.2f\n", mean, stdDev, best, worst, averageExecutionTime);
	}

	public static void run() {
		GeneticDrawingApp.main(null);
	}
}
